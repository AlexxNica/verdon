#!/usr/bin/env node

/* jshint esversion: 6, node: true */

'use strict';

const verdon = require('../');
const yargs = require('yargs');

yargs
  .option('protocol', {
    global: true,
    help: 'path to protocol IDL file'
  })
  .option('scope', {
    global: true,
    help: 'transport scope'
  })
  .command({
    command: 'info <address> [<message>]',
    desc: 'view available RPCs',
    handler: (argv) => {
      const cfg = {
        address: argv.address,
        path: argv.protocol,
        scope: argv.scope
      };
      verdon.info(cfg, (err, svc) => {
        if (err) {
          throw err;
        }
        if (argv.message) {
          const message = svc.getMessage(argv.message);
          if (!message) {
            throw new Error('no such message');
          }
          console.log(message.getDocumentation() || 'No documentation.');
        } else {
          console.log(svc.getDocumentation());
          for (let message of svc.getMessages()) {
            console.log(message.getName());
          }
        }
      });
    }
  })
  .command({
    command: 'call <address> <message> <request>',
    desc: 'execute RPC',
    handler: (argv) => {
      const cfg = {
        address: argv.address,
        path: argv.protocol,
        scope: argv.scope
      };
      verdon.sendMessage(cfg, argv.message, argv.request, (err, res) => {
        if (err) {
          console.error(err);
          process.exit(1);
        }
        console.log(res);
      });
    }
  })
  .help()
  .parse(process.argv.slice(2));
